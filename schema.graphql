type OptionType @entity {
  # OptionId
  id: ID!

  # Position
  underlyingAsset: Token!
  underlyingAmount: BigInt!
  exerciseAsset: Token!
  exerciseAmount: BigInt!

  # Exercisable Window
  exerciseTimestamp: BigInt!
  expiryTimestamp: BigInt!

  # The deterministic seed used for fair exercise assignment
  settlementSeed: BigInt

  # The address that created the newOptionType
  creator: Account!
  # The transaction hash for the creation of the newOptionType
  createTx: String!

  # The amount of ERC-1155 options written for this OptionType
  amountWritten: BigInt!
  # The amount of ERC-1155 options exercised for this OptionType
  amountExercised: BigInt!

  # Claims that belong to this OptionType
  claims: [Claim!]!
}

type Claim @entity {
  # ClaimId
  id: ID!

  # The OptionType the Claim belongs to
  optionType: OptionType!

  # The address that wrote the claim
  writer: Account!
  # The  hash of the write transaction
  writeTx: String!

  # Whether or not claim has been redeemed
  redeemed: Boolean!
  # Optional: The address that redeemed the claim
  redeemer: Account
  # Optional: The hash of the redeem transaction
  redeemTx: String

  # The total number of fungible ERC-1155 Options that this claim corresponds to
  amountWritten: BigInt!
  # The number of options this claim corresponds to that have been exercised
  amountExercised: BigInt! # TODO: Depends on contract developments, then track via buckets(?)
  # Tne amount of the Exercise Asset this claim can redeem post-expiry
  exercisePositionAmount: BigInt! # TODO: Depends on amountExercised
  # Tne amount of the Underlying Asset this claim can redeem post-expiry
  underlyingPositionAmount: BigInt! # TODO: Depends on amountExercised
}

# https://github.com/OpenZeppelin/openzeppelin-subgraphs
type Account @entity {
  id: ID!
  asERC1155: ERC1155Contract
  ERC1155balances: [ERC1155Balance!]! @derivedFrom(field: "account")
  ERC1155operatorOwner: [ERC1155Operator!]! @derivedFrom(field: "owner")
  ERC1155operatorOperator: [ERC1155Operator!]! @derivedFrom(field: "operator")
  ERC1155transferFromEvent: [ERC1155Transfer!]! @derivedFrom(field: "from")
  ERC1155transferToEvent: [ERC1155Transfer!]! @derivedFrom(field: "to")
  ERC1155transferOperatorEvent: [ERC1155Transfer!]!
    @derivedFrom(field: "operator")
  events: [Event!]! @derivedFrom(field: "emitter")
}

# https://github.com/OpenZeppelin/openzeppelin-subgraphs
type ERC1155Contract @entity(immutable: true) {
  id: ID!
  asAccount: Account!
  tokens: [ERC1155Token!]! @derivedFrom(field: "contract")
  balances: [ERC1155Balance!]! @derivedFrom(field: "contract")
  operators: [ERC1155Operator!]! @derivedFrom(field: "contract")
  transfers: [ERC1155Transfer!]! @derivedFrom(field: "contract")
}

# https://github.com/OpenZeppelin/openzeppelin-subgraphs
type ERC1155Token @entity {
  id: ID!
  contract: ERC1155Contract!
  identifier: BigInt!
  uri: String
  totalSupply: ERC1155Balance!
  balances: [ERC1155Balance!]! @derivedFrom(field: "token")
  transfers: [ERC1155Transfer!]! @derivedFrom(field: "token")

  ## Valorem extended ERC-1155Token attributes
  # 1 = Option; 2 = Claim
  type: Int
  # The OptionId if (type == 1)
  optionType: OptionType
  # The ClaimId if (type == 2)
  claim: Claim
}

# https://github.com/OpenZeppelin/openzeppelin-subgraphs
type ERC1155Balance @entity {
  id: ID!
  contract: ERC1155Contract!
  token: ERC1155Token!
  account: Account
  value: BigDecimal!
  valueExact: BigInt!
  transferFromEvent: [ERC1155Transfer!]! @derivedFrom(field: "fromBalance")
  transferToEvent: [ERC1155Transfer!]! @derivedFrom(field: "toBalance")
}

# https://github.com/OpenZeppelin/openzeppelin-subgraphs
type ERC1155Operator @entity {
  id: ID!
  contract: ERC1155Contract!
  owner: Account!
  operator: Account!
  approved: Boolean!
}

# https://github.com/OpenZeppelin/openzeppelin-subgraphs
type ERC1155Transfer implements Event @entity(immutable: true) {
  id: ID!
  emitter: Account!
  transaction: Transaction!
  timestamp: BigInt!
  contract: ERC1155Contract!
  token: ERC1155Token!
  operator: Account!
  from: Account
  fromBalance: ERC1155Balance
  to: Account
  toBalance: ERC1155Balance
  value: BigDecimal!
  valueExact: BigInt!
}

# https://github.com/OpenZeppelin/openzeppelin-subgraphs
interface Event {
  id: ID!
  transaction: Transaction!
  emitter: Account!
  timestamp: BigInt!
}

# https://github.com/OpenZeppelin/openzeppelin-subgraphs
type Transaction @entity(immutable: true) {
  id: ID!
  timestamp: BigInt!
  blockNumber: BigInt!
  events: [Event!]! @derivedFrom(field: "transaction")
}

type DecimalValue @entity {
  id: ID!
  value: BigDecimal!
  exact: BigInt!
  decimals: Int!
}

type ValoremDayData @entity {
  # timestamp rounded to current day by dividing by 86400
  id: ID!
  # timestamp rounded to current day by dividing by 86400
  date: Int!
  # tvl in USD terms
  totalValueLockedUSD: BigDecimal!
  # volume in USD terms
  volumeUSD: BigDecimal!
  # fees accrued in USD terms
  feesAccrued: BigDecimal!
  # fees swept in USD terms
  feesSwept: BigDecimal!
}

type Token @entity {
  # Token Address
  id: ID!

  # Token Info
  symbol: String!
  name: String!
  decimals: Int!

  # Total number of tokens in Clearinghouse
  totalValueLocked: BigInt!

  # Amount of tokens that are ready to be swept as fees
  feeBalance: BigInt!
  # Lifetime sum of tokens paid to Valorem as fees
  feesAccrued: BigInt!

}

type TokenDayData @entity {
  # token address concatendated with date
  id: ID!
  # timestamp rounded to current day by dividing by 86400
  date: Int!
  # pointer to token
  token: Token!
  # tvl across all contracts in token units
  totalValueLocked: BigDecimal!
  # tvl across all contracts in usd
  totalValueLockedUSD: BigDecimal!
  # token volume in token units
  volume: BigDecimal!
  # token volume in usd
  volumeUSD: BigDecimal!
}

type FeeSwitch @entity {
  # OptionSettlementEngine contract address
  id: ID!
  # recipient of fees
  feeToAddress: String!
  isEnabled: Boolean!
}
